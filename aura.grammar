# Note that DEDENT and INDENT are tokens which stand for spaces or tabs of a
# consistent length. This makes that grammar context sensitive, so it cannot
# actually be described in BNF.

NAME: [A-Za-z][A-Xa-z0-9]*
NEWLINE: '\n'

use_statement: identifier ['as' identifier]

function_def: 'fn' NAME '(' decl_list ')' type NEWLINE function_body

return_statement: 'ret' [expression]

decl_list: decl | decl ',' decl_list | epsilon

type: i[1-9][0-9]* | f16 | f32 | f64 | f128 | '[' type ']' | fn' '(' [type_list] ')' [type] | '(' type_list ')'

type_list: type [',' type_list]

value: identifier | literal

array: '[' value_list ']'

tuple: '(' value_list ')'

assignment_statement: identifier type assignment_op expression
                    | '!' assignment_statement

if_statement: 'if' expression NEWLINE INDENT body DEDENT

switch_statement: 'switch' identifier cases

case_body: statement | 'next' | NEWLINE INDENT [statement | 'next']+ DEDENT

case: 'case' expression [case_body] | 'default' expression [case_body]

cases: NEWLINE INDENT case+ DEDENT

identifier: NAME
          | identifier '.' identifier

value_list: epsilon
          | value
          | value ',' value


behavior: 'on' NAME ['be' NAME] functions

trait: 'trait' NAME function_decls

struct: 'struct' NAME decls

function_call: identifier '(' identifier_list ')'

body: statement | NEWLINE INDENT statement+ DEDENT

functions: NEWLINE INDENT function_def+ DEDENT

decls: NEWLINE INDENT decl+ DEDENT

decl: NAME type

statement: if_statement | return_statement | function_def | behavior | trait
         | struct | switch_statement | expression | assignment_statement
         | use_statement

expression: array | identifier | function_call | binary_expression | tuple

binary_expression: expression operator expression

operator: '+' | '-' | '/' | '*' | '^' | '&' | '|' | '!' | '&&' | '||' | '/=' | '?=' | '>' | '<' | '<=' | '>=' |'!!' | '++' | '--' | '<<' | '>>' | '~'  | '%' | 

# FIXME: what is divide and assign?
assignment_op: '%=' | '|=' | '&=' | '+=' | '-=' | '*=' | '~=' | '<<=' | '>>=' | '='
